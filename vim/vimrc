""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Global
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Leader Key
let mapleader = " "
set nocompatible               " be iMproved

" Python path
let g:UltiSnipsUsePythonVersion = 3
let g:ycm_python_binary_path = '/usr/bin/python3'
let g:pymode_python = 'python3'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vundle Config
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""" Vundle plugin manager {{{
""" Automatically setting up Vundle, taken from
""" http://www.erikzaadi.com/2012/03/19/auto-installing-vundle-from-your-vimrc
let has_vundle=1
if !filereadable($HOME."/.vim/bundle/Vundle.vim/README.md")
    echo "Installing Vundle..."
    echo ""
    silent !mkdir -p $HOME/.vim/bundle
    silent !git clone https://github.com/VundleVim/Vundle.vim $HOME/.vim/bundle/Vundle.vim
    let has_vundle=0
endif

filetype off                                " required to init
set rtp+=$HOME/.vim/bundle/Vundle.vim       " include vundle
call vundle#begin()                         " init vundle

Plugin 'VundleVim/Vundle.vim'

""" Plugins """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" APPEARANCE PLUGINS
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'altercation/vim-colors-solarized'
Plugin 'ryanoasis/vim-devicons'
Plugin 'Yggdroot/indentLine'

" TOOLS
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'airblade/vim-gitgutter'
Plugin 'godlygeek/tabular'
Plugin 'Raimondi/delimitMate'
Plugin 'preservim/tagbar'
Plugin 'ctrlpvim/ctrlp.vim'

" SYNTAX CHECK AND COMPLETION
Plugin 'scrooloose/syntastic'
if has('nvim')
  Plugin 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plugin 'Shougo/deoplete.nvim'
  Plugin 'roxma/nvim-yarp'
  Plugin 'roxma/vim-hug-neovim-rpc'
endif
Plugin 'shougo/neosnippet'
Plugin 'shougo/neosnippet-snippets'
Plugin 'honza/vim-snippets'

" LANGUAGE SPECIFIC
Plugin 'robbles/logstash.vim'
Plugin 'davidhalter/jedi-vim'
Plugin 'parkr/vim-jekyll'
Plugin 'Glench/Vim-Jinja2-Syntax'
Plugin 'pearofducks/ansible-vim'
Plugin 'rodjek/vim-puppet'
Plugin 'ekalinin/Dockerfile.vim'
Plugin 'cespare/vim-toml'
Plugin 'hashivim/vim-terraform'
Plugin 'PProvost/vim-ps1'
Plugin 'elzr/vim-json'
Plugin 'google/vim-jsonnet'
Plugin 'davidgranstrom/scnvim'
Plugin 'fatih/vim-go'


" Plugin 'hashivim/vim-consul'
" Plugin 'mustache/vim-mustache-handlebars'
" Plugin 'hashivim/vim-nomadproject'
" Plugin 'hashivim/vim-ottoproject'
" Plugin 'hashivim/vim-packer'
" Plugin 'hashivim/vim-vagrant'
" Plugin 'hashivim/vim-vaultproject'
" Plugin 'elixir-editors/vim-elixir'
" Plugin 'klen/python-mode'
" Plugin 'chase/vim-ansible-yaml'
" Plugin 'ClockworkNet/vim-junos-syntax'

call vundle#end()

" Installing plugins the first time, quits when done {{{
if has_vundle == 0
    :silent! PluginInstall
    :qa
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" FileTypes
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Automatic syntax highlighting for files
filetype plugin indent on
augroup FileTypeRules
  autocmd!
  autocmd BufNewFile,BufRead *.md           set ft=markdown
  autocmd BufNewFile,BufRead *.tex          set ft=tex
  autocmd BufNewFile,BufRead *.txt          set ft=sh
  autocmd BufNewFile,BufRead *.bash*        set ft=sh
  autocmd BufNewFile,BufRead *.jsonnet      set ft=jsonnet
  autocmd BufNewFile,BufRead *.libjsonnet   set ft=jsonnet
augroup END

let g:jsonnet_fmt_on_save = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Colors, terminal & Visual
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" let g:indentLine_char = ''
let g:indentLine_char = '▏'

syn on
if (&term =~ "xterm") || (&term =~ "screen")
    set t_Co=256
endif
" set t_Co=256 " Explicitly tell Vim that the terminal supports 256 colors
let base16colorspace=256 " Access colors present in 256 colorspace
" set t_ut= " Redraw background correctly
set encoding=utf-8
set fileencodings=utf-8,latin2

" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Disable folding
set nofoldenable

" Highlight EOL whitespace, http://vim.wikia.com/wiki/Highlight_unwanted_spaces
highlight ExtraWhitespace   ctermbg=1 guibg=#382424
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=1 guibg=red

"highlight ErrorMsg         ctermbg=darkred guibg=#382424
"match ErrorMsg '\%>80v.\+'
" autocmd ColorScheme * highlight ErrorMsg        ctermbg=red guibg=red

autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/

" Airline bar
let g:airline#extensions#tabline#enabled = 1
let g:airline_inactive_collapse=1
let g:airline_mode_map = {
      \ '__' : '-',
      \ 'n'  : 'N',
      \ 'i'  : 'I',
      \ 'R'  : 'R',
      \ 'c'  : 'C',
      \ 'v'  : 'V',
      \ 'V'  : 'V',
      \ 's'  : 'S',
      \ 'S'  : 'S',
      \ }

" Use Powerline Symbols if your fonts are patched
let g:airline_powerline_fonts = 1
let g:airline_skip_empty_sections = 1

" yaml indentation
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab foldmethod=indent

" let g:ansible_unindent_after_newline = 1
let g:ansible_name_highlight = 'b'
let g:ansible_attribute_highlight = "ob"
let g:ansible_unindent_after_newline = 1

" Colorscheme
set background=dark

"" Uncomment if you have no taste or no time to spend on your color
"" configuration. (No Solarized, no base16)
" let g:airline_theme='jellybeans'
" colorscheme jellybeans

"" Uncomment if you have a solarized terminal
"" (eg: solarized for putty, gnome terminal solarized colors...)
"let g:airline_theme='powerlineish'
let g:airline_theme='solarized'
let g:solarized_termtrans='1'

"" Uncomment if you want to use your BASE16 theme
" let g:airline_theme='base16'
" colorscheme base16-default
colorscheme solarized

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Text, columns, tab and indent related
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 4 spaces
set shiftwidth=2
set tabstop=2

" Linebreak on 80 characters
" set lbr
" set tw=79
set ai "Auto indent
set si "Smart indent
"set wrap "Wrap lines
set colorcolumn=81
set showmatch
set incsearch
set ignorecase
set backspace=2

" Run :FixWhitespace to remove end of line white space.
function! s:FixWhitespace(line1,line2)
    let l:save_cursor = getpos(".")
    silent! execute ':' . a:line1 . ',' . a:line2 . 's/\s\+$//'
    call setpos('.', l:save_cursor)
endfunction
command! -range=% FixWhitespace call <SID>FixWhitespace(<line1>,<line2>)

" Set 7 lines to the cursor - when moving vertically using j/k
set so=7

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Layout, Buffers
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Format the status line
" set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l

set number                          " Show line number
set laststatus=2                    " Always show the statusline
set cmdheight=1                     " Height of the command bar

" Turn on the WiLd menu with zsh-like autocompletion
set wildmenu
" set wildmode=longest:full
set wildignore=*.o,*~,*.pyc

set ruler " Always show current position

set hidden " A buffer becomes hidden when it is abandoned

" Configure backspace so it acts as it should act
set backspace=indent,eol,start
set whichwrap+=<,>,h,l

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
            \ if line("'\"") > 0 && line("'\"") <= line("$") |
            \   exe "normal! g`\"" |
            \ endif
" Remember info about open buffers on close
set viminfo^=%

" Specify the behavior when switching between buffers
try
    set switchbuf=useopen,usetab,newtab
    set stal=2
catch
endtry

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Search
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set ignorecase
set smartcase
set hlsearch
set incsearch

" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('f')<CR>
vnoremap <silent> # :call VisualSelection('b')<CR>

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Use Unix as the standard file type
set ffs=unix,dos,mac

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Files, backups and saves
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nobackup
set nowb
set noswapfile

" Delete trailing whitespaces
func! DeleteTrailingWS()
    exe "normal mz"
    %s/\s\+$//ge
    exe "normal `z"
endfunc

" You can delete trailing whitespaces each time you save a document
" Python
" autocmd BufWrite *.py :call DeleteTrailingWS()

" CoffeeScript
" autocmd BufWrite *.coffee :call DeleteTrailingWS()

" SH
" autocmd BufWrite *.sh :call DeleteTrailingWS()

" All files
autocmd BufWrite * :call DeleteTrailingWS()

" Type :SudoW to save a file with sudo privileges
command! -bar -nargs=0 SudoW   :silent exe "write !sudo tee % >/dev/null"|silent edit!

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Key mapping and remapping
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Move on a line between words
map <C-h> b
map <C-l> w
map <C-q> ^
map <C-e> $

" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
" map <space> /

" Smart way to move between windows
map <leader>wj <C-w>j
map <leader>wk <C-w>k
map <leader>wh <C-w>h
map <leader>wl <C-w>l
map <C-h> <C-w>h
map <C-l> <C-w>l

" Close the current buffer
map <leader>bc :Bclose<cr>
map <leader>bd :Bclose<cr>

" Useful mappings for managing tabs
map <leader>tn :enew<cr>
" map <leader>to :tabonly<cr>
map <leader>tc :Bclose<cr>
map <leader>th :bprevious<cr>
map <leader>tl :bnext<cr>

" Useful mappings for managing windows
map <leader>wn :vsplit<cr>
map <leader>wb :split<cr>
map <leader>wc :close<cr>

" Rotate buffers
map <F2> :bprevious<cr>
map <leader>bp :bprevious<cr>
map <F3> :bnext<cr>
map <leader>bn :bnext<cr>

" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Remap VIM 0 to first non-blank character
map 0 ^

nnoremap <C-j> :m .+1<CR>==
nnoremap <C-k> :m .-2<CR>==
inoremap <C-j> <Esc>:m .+1<CR>==gi
inoremap <C-k> <Esc>:m .-2<CR>==gi
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv

" Turn on/off mouse
" Enable mouse support
map <leader>m <ESC>:exec &mouse!=""? "set mouse=" : "set mouse=nv"<CR>

" Resize vim windows
map <leader>l 85<c-w>\|
map <leader>L 87<c-w>\|

" VIM GREP
" When you press gv you vimgrep after the selected text
vnoremap <silent> gv :call VisualSelection('gv')<CR>

" When you press <leader>r you can search and replace the selected text
vnoremap <silent> <leader>r :call VisualSelection('replace')<CR>

map <leader>co ggVGy:tabnew<cr>:set syntax=qf<cr>pgg
" map <leader>cr :botright cope<cr>
map <leader>n :cn<cr>
map <leader>p :cp<cr>

" Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>M mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

" Quickly open a buffer for scripbble
map <leader>q :e ~/buffer<cr>

" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>
map <F4> :setlocal paste!<cr>

" Toggle highlight search
map <leader>hs :set hlsearch!<cr>

" NERDtree
map <Leader>n <plug>NERDTreeTabsToggle<CR>
map <F5>      <plug>NERDTreeSteppedOpen<CR>

" NERDcommenter
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1

" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction

function! VisualSelection(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    en
    return ''
endfunction

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
    let l:currentBufNum = bufnr("%")
    let l:alternateBufNum = bufnr("#")

    if buflisted(l:alternateBufNum)
        buffer #
    else
        bnext
    endif

    if bufnr("%") == l:currentBufNum
        new
    endif

    if buflisted(l:currentBufNum)
        execute("bdelete! ".l:currentBufNum)
    endif
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PLUGINS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" NERDTree specific
"let g:nerdtree_tabs_autofind=1
"let g:nerdtree_tabs_open_on_console_startup=1 " Launch at start
"let g:nerdtree_tabs_no_startup_for_diff=1
let g:NERDTreeWinPos = "left"

" For conceal markers.
" if has('conceal')
"   set conceallevel=2
"   set concealcursor=nvi
" endif
let g:indentLine_concealcursor = 0
let g:vim_json_syntax_conceal = 0

" SYNTASTIC
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_aggregate_errors = 1
silent! autocmd VimEnter * SyntasticToggleMode " disable syntastic by default
silent! nmap <F6> :lprevious<CR>
silent! nmap <F7> :lnext<CR>
silent! nmap <leader>sc :SyntasticCheck<CR>

" DEOPLETE + NEOSNIPPET or ULTISNIPS
let g:deoplete#enable_at_startup = 1
call deoplete#custom#option('omni_patterns', { 'go': '[^. *\t]\.\w*' })
call deoplete#custom#option('smart_case', v:true)
call deoplete#custom#option('min_pattern_length', 1)

" deoplete tab-complete
inoremap <expr><tab> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><s-tab> pumvisible() ? "\<C-p>" : "\<TAB>"
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets, ~/.vim/bundle/scnvim/scnvim-data'
let g:neosnippet#enable_completed_snippet = 1

" neosnippet expand
imap <C-space>     <Plug>(neosnippet_expand_or_jump)
smap <C-space>     <Plug>(neosnippet_expand_or_jump)
xmap <C-space>     <Plug>(neosnippet_expand_target)

" Ultisnip paths and shorcuts
" let g:UltiSnipsSnippetDirectories=$HOME.'/.vim/bundle/vim-snippets/UltiSnips'
" let g:UltiSnipsSnippetDirectories = ['UltiSnips', 'scnvim-data']
" let g:UltiSnipsExpandTrigger = "<C-space>"
" let g:UltiSnipsListSnippets = "<c-tab>"
" let g:UltiSnipsJumpForwardTrigger = "<space><tab>"
" let g:UltiSnipsJumpBackwardTrigger = "<space><s-tab>"
" inoremap <c-x><c-k> <c-x><c-k>

" deoplete + neosnippet + autopairs changes
" let g:AutoPairsMapCR=0
" imap <expr><TAB> pumvisible() ? "\<C-n>" : (neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>")
" imap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
" imap <expr><CR> pumvisible() ? deoplete#mappings#close_popup() : "\<CR>"
" imap <expr><CR> pumvisible() ? deoplete#mappings#close_popup() : "\<CR>\<Plug>AutoPairsReturn"
" let g:AutoPairsFlyMode = 1

" SUPERCOLLIDER
" let g:scFlash = 1
" let g:sclangTerm = "gnome-terminal -x $SHELL -ic"
let g:scnvim_postwin_size = 80
let g:scnvim_postwin_auto_toggle = 1
let g:scnvim_scdoc = 1
" let g:scnvim_no_mappings = 1
let g:scnvim_statusline_interval = 2
let g:scnvim_eval_flash_repeats = 1
let g:scnvim_eval_flash_duration = 150
highlight SCNvimEval guifg=black guibg=grey ctermfg=black ctermbg=grey
nmap <S-space> <C-e>

" TAGBAR
map <F8> :TagbarToggle<CR>

" VIMGO
let g:go_def_reuse_buffer = 1
let g:go_metalinter_autosave = 1
