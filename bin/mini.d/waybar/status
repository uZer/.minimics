#!/usr/bin/env bash
# display status of various system process for waybar

set -eu

# Pretty print command name
COMMAND=${0//\// }
COMMAND=${COMMAND/*mini.d/mini}

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-

get_usage () {
  cat << EOF
display various information in waybar

usage:
  $COMMAND --help, -h
  $COMMAND <arg>

arguments:
  -h, --help   display this message
  ts           display tailscale status for waybar
  tsp          display tailscale peers for waybar tooltip
  ip           display public ip
EOF
}

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-

status_public_ip () {
  echo " $(curl 'https://api.ipify.org')"
}

status_ts () {
  json=$(tailscale status --json 2>/dev/null || echo "")

  # If Tailscale isn't running or has no output
  if [[ -z "$json" ]] || ! echo "$json" | jq -e '.BackendState == "Running"' >/dev/null; then
    jq -cM <<EOF
{
  "text": "󰇘",
  "tooltip": "Tailscale is disconnected",
  "class": "disconnected"
}
EOF
    exit 0
  fi

  # Trim DNS name to hostname only (remove MagicDNSSuffix)
  tailnet=$(echo "$json" | jq -r '.MagicDNSSuffix')
  peers=$(status_ts_peers | jq -Rs .)
  # "tooltip": "connected as $my_name\n\npeers:\n" +$peers,

  # Check if ExitNodeStatus exists
  exit_node_status=$(echo "$json" | jq -r 'try .ExitNodeStatus // empty')
  if [[ -z "$exit_node_status" ]]; then
    # No exit node — normal connection
    jq -cM <<EOF
{
  "text": "󱗼",
  "tooltip": $peers,
  "class": "connected"
}
EOF
    exit 0
  fi

  # Extract exit node peer info
  exit_id=$(echo "$json" | jq -r '.ExitNodeStatus.ID')
  exit_online=$(echo "$json" | jq -r '.ExitNodeStatus.Online')
  exit_name=$(echo "$json" | jq -r --arg id "$exit_id" '.Peer[] | select(.ID == $id) | .DNSName')

  # Trim exit node DNS name
  if [[ "$exit_name" == *"$tailnet." ]]; then
    exit_name="${exit_name/%.${tailnet}./}"
  fi

  if [[ "$exit_online" == "true" ]]; then
    jq -cM <<EOF
{
  "text": "󱗼 󰴽 $exit_name",
  "tooltip": $peers,
  "class": "exit-online"
}
EOF
  else
    jq -cM <<EOF
{
  "text": "󱗼 via $exit_name ()",
  "tooltip": $peers,
  "class": "exit-offline"
}
EOF
  fi
}

status_ts_peers () {
  json=$(tailscale status --json 2>/dev/null || echo "")
  [[ -z "$json" ]] && echo "No Tailscale data" && return

  echo -n '<span font-family="mono" font-size="8pt">'
  echo "$json" | jq -r '
    def ago:
      sub("\\..*"; "Z")
      | fromdateiso8601 as $date
      | (now - $date) as $diff
      | if $diff < 60 then "just now"
        elif $diff < 3600 then ((($diff / 60) | floor | tostring) + "m ago")
        elif $diff < 86400 then ((($diff / 3600) | floor | tostring) + "h ago")
        else ((($diff / 86400) | floor | tostring) + "d ago")
      end;

    . as $root
    | ([ $root.Self ] + ($root.Peer | to_entries | map(.value)))[]
    | {
        id: .ID,
        ip: (.TailscaleIPs[0] // "unknown"),
        raw_dns: .DNSName,
        user_id: (.UserID | tostring),
        os: (.OS // "unknown" | ascii_downcase),
        active: (.Active // false),
        online: (.Online // false),
        exit: (.ExitNodeOption // false),
        last_seen: (.LastSeen // null),
        is_self: (.ID == $root.Self.ID)
      }
    | .dns = (
        if .raw_dns | endswith("." + $root.MagicDNSSuffix + ".") then
          (.raw_dns | sub("\\." + $root.MagicDNSSuffix + "." + "$"; ""))
        else .raw_dns end
      )
    | .user = (
        $root.User[.user_id]?.DisplayName // "unknown"
      )
    | .os_icon = (
        if .os | test("ios") then "󰀷"
        elif .os | test("win") then "󰖳"
        elif .os | test("android") then ""
        elif .os | test("linux") then ""
        elif .os | test("mac|darwin") then ""
        else "" end
      )
    | .exit_icon = if .exit == true then "󰗼" else "" end
    | .status = (
        if .is_self == true then
          "<span>󰋜</span>"
        elif .active == true then
          "<span></span>"
        elif .online == false then
          "<span> " + (.last_seen | ago) + "</span>"
        else
          "<span></span>"
        end
      )
    | "\(.user);\(.dns);(\(.ip));\(.os_icon);\(.exit_icon);\(.status)"
  ' | sort | column -t -s ';' | sed 's#\t#  #g'
  echo '</span>'
}

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-

[ $# -lt 1 ] && get_usage && exit 0

case "$1" in
  -h|--help|"")
    get_usage
    ;;
  ip)
    status_public_ip
    ;;
  ts)
    status_ts
    ;;
  tsp)
    status_ts_peers
    ;;
  *)
    logg err "unknown option '$1'"
    get_usage
    exit 1
    ;;
esac
