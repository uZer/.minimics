#!/usr/bin/env bash
# display tailscale status for waybar

set -eu

# Pretty print command name
COMMAND=${0//\// }
COMMAND=${COMMAND/*mini.d/mini}

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-

# If Tailscale unit isn't running
if ! systemctl is-active --quiet tailscaled; then exit 0 ; fi

# Fetch json status
json=$(tailscale status --json 2>/dev/null || echo "")

# If Tailscale isn't running or has no output
if [[ -z "$json" ]] || ! echo "$json" | jq -e '.BackendState == "Running"' >/dev/null; then
  jq -cM <<EOF
  {
    "text": "󰇘",
    "tooltip": "Tailscale is disconnected",
    "class": "disconnected"
  }
EOF
exit 0
fi

# Trim DNS name to hostname only (remove MagicDNSSuffix)
tailnet=$(echo "$json" | jq -r '.MagicDNSSuffix')
peers=$(mini waybar status tsp | jq -Rs .)

# Check if ExitNodeStatus exists
exit_node_status=$(echo "$json" | jq -r 'try .ExitNodeStatus // empty')
if [[ -z "$exit_node_status" ]]; then
  # No exit node — normal connection
  is_advertising_exit=$(echo "$json" | jq -r 'try .Self.ExitNodeOption // empty')
  if [[ -n "$is_advertising_exit" ]]; then
    text="󱗼 󰩈"
  else
    text="󱗼"
  fi
  jq -cM <<EOF
  {
    "text": "$text",
    "tooltip": $peers,
    "class": "connected"
  }
EOF
exit 0
fi

# Extract exit node peer info
exit_id=$(echo "$json" | jq -r '.ExitNodeStatus.ID')
exit_online=$(echo "$json" | jq -r '.ExitNodeStatus.Online')
exit_still_advertising=$(echo "$json" | jq -r --arg id "$exit_id" '.Peer[] | select(.ID == $id) | .ExitNodeOption')
exit_name=$(echo "$json" | jq -r --arg id "$exit_id" '.Peer[] | select(.ID == $id) | .DNSName')

# Trim exit node DNS name
if [[ "$exit_name" == *"$tailnet." ]]; then
  exit_name="${exit_name/%.${tailnet}./}"
fi

if [[ "$exit_online" == "true" ]] && [[ "$exit_still_advertising" == "true" ]]; then
  jq -cM <<EOF
  {
    "text": "󱗼 󰴽 $exit_name",
    "tooltip": $peers,
    "class": "exit-online"
  }
EOF
else
  jq -cM <<EOF
  {
    "text": "󱗼 via $exit_name ()",
    "tooltip": $peers,
    "class": "exit-offline"
  }
EOF
fi
