#!/usr/bin/env bash
# This script is a really simple wrapper to call subcommands.
# Subcommands must be executables in the .d directory.

set -e

BINNAME=mini
BASEDIR="$(dirname "$(readlink -f "$0")")/${BINNAME}.d"

# shellcheck source=lib.logg.sh
source "${BASEDIR}/../lib.logg.sh"
# shellcheck source=lib.minimicsrc.sh
source "${BASEDIR}/../lib.minimicsrc.sh"

export BINPATH="${BASEDIR}/.."

short_usage () {
  cat << EOF
usage: ${BINNAME} [ common_options ] subcommand [ specific_options ]
       ${BINNAME} --help
EOF
}

get_usage () {
  cat << EOF
usage:
  ${BINNAME} [ common_options ] subcommand [ specific_options ]

common options are:
  -h | --help | help:  display this help
  -l | --list | list:  display all commands and subcommands

available subcommands:
EOF
  display_commands "${BASEDIR}"
}

# display a command name and its summary
display_commands () {
  find "${1}" -type f,l -executable -printf '\033[0m%p \033[32m' -exec sed -n '2p' {} \; | \
    sed "s#${BASEDIR}/#  $(basename "$0") #g" | sed 's#/# #g' | sort | column -t -s '#'
  printf -- "\033[0m\n"
}


# display usage for subcommands
short_usage_scoped () {
  BASE=$1
  cat << EOF
usage: $(echo "${BASE}" | sed "s#${BASEDIR}/#${BINNAME} #g" | sed 's#/# #g') subcommand [ specific_options ]

available subcommands:
EOF
  display_commands "${BASE}"
}

# recursively explore tree of scripts to display
# appropriate scoped usage
call_subscript () {
  BASE=$1
  shift
  COMMAND=$1
  if [ -f "${BASE}/${COMMAND}" ] && [ -x "${BASE}/${COMMAND}" ]; then
    shift
    exec "${BASE}/${COMMAND}" "$@"
  elif [ -d "${BASE}/${COMMAND}" ]; then
    shift
    call_subscript "${BASE}/${COMMAND}" "${@:-''}"
  else
    echo "subcommand '${COMMAND}' not found" >&2
    echo
    if [ "${BASE}" = "${BASEDIR}" ]; then
      get_usage >&2
    else
      short_usage_scoped "${BASE}" >&2
    fi
    exit 1
  fi
}

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-

[ "$#" -eq 0 ] && get_usage >&2 && exit 0

# Parsing of common options is done here
while [ "$#" -ne 0 ]; do
  key="$1"
  case "$key" in
    -h|--help|help) get_usage >&2 ; exit 0 ;;
    -l|--list|list) display_commands "${BASEDIR}" ; exit 0 ;;
    -*) echo "Error: bad option '$key'" >&2 ; get_usage >&2 ; exit 1 ;;
    *) break ;;
  esac
  shift
done

call_subscript "${BASEDIR}" "$@"
